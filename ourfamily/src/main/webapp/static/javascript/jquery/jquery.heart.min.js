(function(w) {
    if (!w.Svc)
        w.Svc = {};
    Svc.loading = bC = function(tips) {
        var self = this;
        self.t = null;
        self.K = null;
        self.bp = function() {
            if (self.t != null && self.K != null)
                return;
            self.t = $('<div/>').attr('id', "t").css({
                "display": "none",
                "background": "gray",
                "position": "absolute",
                "left": "0px",
                "top": "0px",
                "width": '100%',
                "height": '100%',
                "z-index": "9999",
                "filter": "alpha(opacity=0)",
                "-moz-opacity": "0.0",
                "opacity": "0.0"
            });
            if (self.t != null)
                $(document.body).append(self.t);
            self.K = $('<div/>').attr('id', "K").css({
                "display": "none",
                'color': 'white',
                'padding': '5px',
                "position": "absolute",
                "background": "#0099ff",
                "right": "0px",
                "z-index": "9999",
                "top": "0px"
            }).append(tips);
            if (self.K != null)
                $(document.body).append(self.K);
        };
        self.show = function() {
            self.bp();
            self.K.show();
            self.t.show();
        };
        self.close = function() {
            if (self.t != null)
                self.t.hide().remove();
            if (self.K != null)
                self.K.hide().remove();
            self.t = null;
            self.K = null;
        };
    };
    var j = new Svc.loading("系统正在处理, 请稍候...");
    var bV = function(msg, bd, G) {
        if (msg.successful && !msg.data.authCheckCode) {
            bd && bd(msg.data);
        }
        else {
            if (msg.code && msg.code == "emm.noLogin") {
                top.alert('您当前还未登录，点击确定登录！');
                top.location.href = Svc.rootPath() + "/login.do";
            }
            else if (msg.data.authCheckCode == "emm.noAuth") {
                top.alert('您没有权限访问当前模块！');
                top.location.href = Svc.rootPath() + "/login.do";
            }
            G && G(msg.data);
        }
    };
    var call = function(h, O, R, v, method, V, async, G, C) {
        var setting = {};
        if (method)
            setting.type = method;
        else
            setting.type = 'POST';
        setting.url = O;
        if (h == 'json') {
            setting.data = R && JSON.stringify(R);
            setting.contentType = 'application/json;charset=UTF-8';
            setting.dataType = 'json';
        }
        else if (h == 'form') {
            setting.contentType = 'application/x-www-form-urlencoded; charset=UTF-8';
            setting.data = R;
            setting.traditional = true;
        }
        else if (h == 'page') {
            setting.dataType = 'html';
        }
        setting.beforeSend = function(xhr) {
            if (V) {
                if ((typeof V) === 'string')
                    xhr.setRequestHeader('functionReferBy', V);
                else
                    xhr.setRequestHeader('functionReferBy', JSON.stringify(V));
            }
            if ((C == null) || (C == undefined) || (C === true)) {
                j.show();
            }
        };
        setting.complete = function(XMLHttpRequest, aR) {
            if ((C == null) || (C == undefined) || (C === true)) {
                j.close();
            }
        };
        setting.error = function(xhr, aR, by) {
            if ((C == null) || (C == undefined) || (C === true)) {
                j.close();
            }
        };
        setting.success = function(msg) {
            if ((C == null) || (C == undefined) || (C === true)) {
                j.close();
            }
            if (h == 'page') {
                v && v(msg);
            }
            else
                bV(msg, v, G);
        };
        if (async != undefined) {
            setting.async = async;
        }
        setting.cache = false;
        $.ajax(setting);
    };
    Svc.AjaxJson = function() {
        var L = function(O, R, v, V, async) {
            call('json', O, R, v, 'GET', V, async);
        };
        var J = function(O, R, v, V, async) {
            call('json', O, R, v, 'POST', V, async);
        };
        var k = function(O, R, v, V) {
            L(O, R, v, V, false);
        };
        var bE = function(O, R, v, V) {
            J(O, R, v, V, false);
        };
        return {
            get: L,
            post: J,
            sGet: k,
            sPost: bE
        };
    }();
    Svc.ajax = function(aP) {
        var H = {
            method: 'POST',
            dataType: "json",
            bq: true
        };
        $.extend(H, aP);
        call(H.dataType, H.url, H.param, H.success, H.method.toUpperCase(), H.V, H.bq, H.G);
    };
    Svc.AjaxForm = function() {
        var L = function(O, R, v, V, async) {
            call('form', O, R, v, 'GET', V, async);
        };
        var J = function(O, R, v, V, async) {
            call('form', O, R, v, 'POST', V, async);
        };
        var k = function(O, R, v, V) {
            L(O, R, v, V, false);
        };
        var bE = function(O, R, v, V) {
            J(O, R, v, V, false);
        };
        var aI = function(T, v, V) {
            var p = T.serialize();
            var url = T.attr('action');
            var method = T.attr('method');
            call('form', url, p, v, method, V);
        };
        return {
            get: L,
            post: J,
            send: aI,
            sGet: k,
            sPost: bE
        };
    }();
    Svc.formToJson = function(T, aZ) {
        var o = {};
        var a = T.serializeArray();
        $.each(a, function() {
            if (this.value || aZ) {
                if (o[this.name]) {
                    if (!o[this.name].push) {
                        o[this.name] = [o[this.name]];
                    }
                    o[this.name].push(this.value || null);
                }
                else {
                    if ($("[name='" + this.name + "']:checkbox", T).length) {
                        o[this.name] = [this.value];
                    }
                    else {
                        o[this.name] = this.value || null;
                    }
                }
            }
        });
        return o;
    };
    Svc.jsonToDom = function(data, az, l, bf) {
        var aa = {
            INPUTradio: function(dom, val) {
                dom.removeAttr("checked");
                if (dom.val() == val)
                    dom.attr("checked", "checked");
            },
            INPUTcheckbox: function(dom, F) {
                var array = [];
                if (Object.prototype.toString.apply(F) === "[object Array]") {
                    array = F;
                }
                else {
                    array.push(F);
                }
                for ( var i in array) {
                    if (dom.val() == array[i])
                        dom.attr("checked", "checked");
                }
            },
            INPUThidden: function(dom, val) {
                dom.val(val);
            },
            INPUTtext: function(dom, val) {
                dom.val(val);
            },
            TEXTAREAtextarea: function(dom, val) {
                dom.val(val);
            },
            LABEL: function(dom, val) {
                dom.text(val);
            },
            TEXTAREA: function(dom, val) {
                dom.text(val);
            },
            SELECT: function(dom, val) {
                dom.val(val);
            },
            "SELECTselect-one": function(dom, val) {
                dom.val(val);
            },
            INPUTfile: function() {},
            FORM: function() {}
        };
        if (!l)
            l = '[name]';
        var doms = $(l, az);
        if (data) {
            $.each(doms, function(i) {
                var dom = doms.eq(i);
                var domName = dom.attr('name');
                if (data[domName] == null)
                    data[domName] = "";
                var tagName = dom.get(0).tagName;
                var tagType = dom.attr("type");
                var type = tagType ? tagName + tagType : tagName;
                if (bf) {
                    $.each(bf, function(i, bV) {
                        if (bV(dom, data[domName], type) == false)
                            return;
                    });
                }
                aa[type](dom, data[domName]);
            });
        };
    };
    Svc.resetForm = function(T) {
        if (T) {
            var resetInput = $("input[type='reset']", T);
            if (resetInput.length == 0) {
                resetInput = $("<input type='reset' style='display:none;'/>");
                T.append(resetInput);
            }
            resetInput.trigger('click');
            $("textarea", T).empty();
            $("input[type='hidden']", T).val("");
        }
    };
    Svc.queryString = function(name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
        var r = window.location.search.substr(1).match(reg);
        if (r != null)
            return (r[2]);
        return null;
    };
    Svc.rootPath = function() {
        var obj = window.location;
        var aW = obj.pathname.split("/")[1];
        var rootPath = obj.protocol + "//" + obj.host + "/" + aW + "/";
        return rootPath;
    }
})(window);
//对Date的扩展，将 Date 转化为指定格式的String
//月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
//年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
//例子： 
//(new Date()).format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
//(new Date()).format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
Date.prototype.format = function(fmt) { //author: meizz 
    var o = {
        "M+": this.getMonth() + 1, //月份 
        "d+": this.getDate(), //日 
        "H+": this.getHours(), //小时 
        "m+": this.getMinutes(), //分 
        "s+": this.getSeconds(), //秒 
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度 
        "S": this.getMilliseconds()
    //毫秒 
    };
    if (/(y+)/.test(fmt))
        fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for ( var k in o)
        if (new RegExp("(" + k + ")").test(fmt))
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
};
//Array.prototype.remove=function(dx){
//　if(isNaN(dx)||dx>this.length){return false;}
//　for(var i=0,n=0;i<this.length;i++){
//　　　if(this[i]!=this[dx]){
//　　　　　this[n++]=this[i]
//　　　}
//　}
//　this.length-=1
//};
String.prototype.trim = function() {
    return this.replace(/(^\s*)|(\s*$)/g, '');
};